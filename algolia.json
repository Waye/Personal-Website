[{"author":null,"categories":["Learn","Computer Science"],"content":"Sliding Window, Two Pointer, Fast \u0026 Slow Pointer Problems","date":1680125160,"description":"Sliding Window, Two Pointer, Fast \u0026 Slow Pointer Problems","dir":"post/","excerpt_html":"Sliding Window, Two Pointer, Fast \u0026 Slow Pointer Problems","excerpt_text":"Sliding Window, Two Pointer, Fast \u0026 Slow Pointer Problems","expirydate":-62135596800,"fuzzywordcount":1400,"html":"Sliding Window, Two Pointer, Fast \u0026 Slow Pointer Problems","keywords":null,"kind":"page","lang":"en","lastmod":1680125160,"objectID":"4eb6e2fa7ae956837869c4bbba2c77e0","permalink":"https://weiyi-hu.com/2023/03/29/Sliding-Window-Two-Pointer-Fast-Slow-Pointer/","publishdate":"2023-03-29T21:26:00Z","readingtime":3,"relpermalink":"/2023/03/29/Sliding-Window-Two-Pointer-Fast-Slow-Pointer/","section":"post","summary":"Sliding Window Conditions contiguous subarrays (or sublists) of a given size Questions 209 class Solution { public int minSubArrayLen(int target, int[] nums) { int n = nums.length; int left = 0, right = 0, sum = 0, minLen = Integer.MAX_VALUE; // Loop through the array using two pointers: left and right while (right \u0026lt; n) { // Add the current number to the sum sum += nums[right]; // If the","tags":["Algorithms","Data-Structure"],"title":"刷题(四)","type":"post","url":"/2023/03/29/Sliding-Window-Two-Pointer-Fast-Slow-Pointer/","weight":0,"wordcount":1349},{"author":null,"categories":["Learn","Computer Science"],"content":"Recursion Problems","date":1679320800,"description":"Recursion Problems","dir":"post/","excerpt_html":"Recursion Problems","excerpt_text":"Recursion Problems","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Recursion Problems","keywords":null,"kind":"page","lang":"en","lastmod":1679320800,"objectID":"cbaf2e551245334babba40ba7aaf5fb0","permalink":"https://weiyi-hu.com/2023/03/20/recursion/","publishdate":"2023-03-20T14:00:00Z","readingtime":4,"relpermalink":"/2023/03/20/recursion/","section":"post","summary":"Conditions We refer to a recursive function as tail-recursion when the recursive call is the last thing that function executes. Otherwise, it\u0026rsquo;s known as head-recursion. Iteration will be more complicated and harder to understand compared to recursion, for example: traversing a binary tree. DFS 图算法 =\u0026gt; master theorem Questions 21 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; *","tags":["Algorithms","Data-Structure"],"title":"刷题(三)","type":"post","url":"/2023/03/20/recursion/","weight":0,"wordcount":1699},{"author":null,"categories":["Learn","Computer Science"],"content":"Subarray-Sum-Prefix-Sum Problems","date":1679019840,"description":"Subarray-Sum-Prefix-Sum Problems","dir":"post/","excerpt_html":"Subarray-Sum-Prefix-Sum Problems","excerpt_text":"Subarray-Sum-Prefix-Sum Problems","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Subarray-Sum-Prefix-Sum Problems","keywords":null,"kind":"page","lang":"en","lastmod":1679019840,"objectID":"98d60a7660fb831f71ad388b1ea91a4f","permalink":"https://weiyi-hu.com/2023/03/17/Subarray-Sum-Prefix-Sum/","publishdate":"2023-03-17T02:24:00Z","readingtime":4,"relpermalink":"/2023/03/17/Subarray-Sum-Prefix-Sum/","section":"post","summary":"Conditions Prefix sum is a powerful pre-processing/ caching technique for algorithm problems. The idea is to calculate/store the consecutive totals of the elements in an array in O(n). Questions 304 class NumMatrix { // To achieve O(1) time complexity for sumRegion, we can use a precomputation technique called prefix sum. We can calculate a 2D prefix sum matrix where each element in the matrix represents the sum of all elements","tags":["Algorithms","Data-Structure"],"title":"刷题(二)","type":"post","url":"/2023/03/17/Subarray-Sum-Prefix-Sum/","weight":0,"wordcount":1647},{"author":null,"categories":["Learn","Computer Science"],"content":"Interval Merging Problems","date":1678748760,"description":"Interval Merging Problems","dir":"post/","excerpt_html":"Interval Merging Problems","excerpt_text":"Interval Merging Problems","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Interval Merging Problems","keywords":null,"kind":"page","lang":"en","lastmod":1678748760,"objectID":"55ca37ca3822369be1e0d5acc6f446ff","permalink":"https://weiyi-hu.com/2023/03/13/merge-interval/","publishdate":"2023-03-13T23:06:00Z","readingtime":3,"relpermalink":"/2023/03/13/merge-interval/","section":"post","summary":"Conditions Questions 56 class Solution { public int[][] merge(int[][] intervals) { //sort Arrays.sort(intervals, Comparator.comparingInt(a -\u0026gt; a[0])); List\u0026lt;int[]\u0026gt; merged = new ArrayList\u0026lt;\u0026gt;(); for(int[]interval:intervals){ //empty(),arraylist get last element =merged.size()-1 if( merged.isEmpty() || merged.get(merged.size()-1)[1] \u0026lt; interval[0]){ merged.add(interval); }else if(merged.get(merged.size()-1)[1] \u0026gt;= interval[0] ){ merged.get(merged.size()-1)[1] = Math.max(merged.get(merged.size()-1)[1],interval[1] ); } } //toArray(new int[][]) return merged.toArray(new int[merged.size()][2]); } } Arrays.sort(intervals, Comparator.comparingInt(a -\u0026gt; a[0])); Arrays.sort(intervals, (a, b) -\u0026gt; Integer.compare(a[0], b[0])); 57 class Solution { public int[][] insert(int[][] intervals,","tags":["Algorithms","Data-Structure"],"title":"刷题(一)","type":"post","url":"/2023/03/13/merge-interval/","weight":0,"wordcount":1262},{"author":null,"categories":["Learn","Christian"],"content":"你们既然接受了主基督耶稣，就当遵他而行, 在他里面生根建造，信心坚固，正如你们所领的教训，感谢的心也更增长了。歌罗西书 2:6-7","date":1677708960,"description":"你们既然接受了主基督耶稣，就当遵他而行, 在他里面生根建造，信心坚固，正如你们所领的教训，感谢的心也更增长了。歌罗西书 2:6-7","dir":"post/","excerpt_html":"你们既然接受了主基督耶稣，就当遵他而行, 在他里面生根建造，信心坚固，正如你们所领的教训，感谢的心也更增长了。歌罗西书 2:6-7","excerpt_text":"你们既然接受了主基督耶稣，就当遵他而行, 在他里面生根建造，信心坚固，正如你们所领的教训，感谢的心也更增长了。歌罗西书 2:6-7","expirydate":-62135596800,"fuzzywordcount":6100,"html":"你们既然接受了主基督耶稣，就当遵他而行, 在他里面生根建造，信心坚固，正如你们所领的教训，感谢的心也更增长了。歌罗西书 2:6-7","keywords":null,"kind":"page","lang":"en","lastmod":1677708960,"objectID":"a1d154449a825d40c7e31a971f56f2e8","permalink":"https://weiyi-hu.com/2023/03/01/foundation-of-faith-one/","publishdate":"2023-03-01T22:16:00Z","readingtime":13,"relpermalink":"/2023/03/01/foundation-of-faith-one/","section":"post","summary":"谁是耶稣(一):预言 预言论到耶稣基督的来历 耶稣基督 国籍 民数记 24:17-19 路加福音 1:33 种族 耶利米书 23:5-6 马太福音 1:1 支派 创世记49:10 马太福音1:2 家族 以赛亚","tags":["Christian","Teaching Materials"],"title":"信仰基础(一)","type":"post","url":"/2023/03/01/foundation-of-faith-one/","weight":0,"wordcount":6036},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://weiyi-hu.com/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"你好像 发现了一个神秘的小地方!! 我的2023大计划 😊 一直不明白为什么一定要信主 直到发现人有罪 生活的价值不再是单单为了荣耀主 而是要争一口气 而是","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":431}]